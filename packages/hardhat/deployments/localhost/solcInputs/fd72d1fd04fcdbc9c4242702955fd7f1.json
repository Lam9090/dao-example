{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "contracts/CryptoDevsDao.sol": {
      "content": "// SPDX-License-Identifier: SEE LICENSE IN LICENSE\npragma solidity ^0.8.25;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ninterface ICryptoDevsNFT {\n\t/// @dev balanceof() returns the number of NFTs owned by the given address\n\t/// @param owner - the address to get the balance for\n\t/// @return Returns the number of NFTs owned\n\tfunction balanceOf(address owner) external view returns (uint);\n\n\t/// @dev tokenOfOwnerByIndex() returns the tokenId at the given index for owner\n\t/// @param owner - the address to fetch the tokenId for;\n\t/// @param index - index of NFT in owned tokens array to fetch\n\t/// @return Returns the tokenId\n\tfunction tokenOfOwnerByIndex(\n\t\taddress owner,\n\t\tuint index\n\t) external view returns (uint);\n}\n\ninterface IFakeNFTMarketplace {\n\t/// @dev getPrice() returns the price of an NFT.\n\t/// @return Returns a boolean value - true if available, false if not\n\tfunction getPrice() external view returns (uint);\n\n\t/// @dev available() checks whether the given tokenId of NFT has been purchased;\n\t/// @param _tokenId - the tokenId\n\tfunction available(uint _tokenId) external view returns (bool);\n\t/// @dev purchase() purchases the given tokenId of NFT from FakeNFTMarketplace\n\t/// @param _tokenId the fake tokenId to be purchased\n\tfunction purchase(uint _tokenId) external payable;\n}\n\n// What a proposal would looks like;\nstruct Proposal {\n\t// nftTokenId - the TokenId of the NFT to purchase from FakeNFTMarketplace if the proposal passed;\n\tuint nftTokenId;\n\t// deadline - the UNIX timestamp until which this proposal is active;\n\t// proposal can be excuted after the deealine has been exceeded\n\tuint deadline;\n\t// approvals - the number of voters appove this proposal\n\tuint approvals;\n\t// rejections - the number of voters against this proposal\n\tuint rejections;\n\t// excuted - whether or not this proposal has beed excuted yet;\n\t// proposal only can be excuted after the dealline has beed exceeded\n\tbool excuted;\n\t// voters - a mapping of CryptoDevs NFT tokenId to booleans indicating whether the token of NFT has already been used to cast a vote or not;\n\tmapping(uint => bool) voters;\n}\n\n/* DevNFTDao has the functionality we need:\n    1.Allow holders of CryptoDevs NFT to create a new proposal\n    2.Allow holders of CryptoDevs NFT to vote on proposal\n    3.Allow holders of CryptoDevs NFT to excute an proposal after deadline has passed if proposal passed\n    4.Store all the proposals in the contract;\n*/\ncontract CryptoDevsNFTDao is Ownable {\n\t// proposals - a mapping of Proposal Id to Proposal\n\tmapping(uint => Proposal) public proposals;\n\n\t// size - a size of the proposals mapping, indicating how many proposals has been created;\n\tuint public size;\n\n\tICryptoDevsNFT cryptoDevsNFT;\n\n\tIFakeNFTMarketplace nftMarketplace;\n\n\tconstructor(address _nftMarketplace, address _cryptoDevsNFT) {\n\t\tcryptoDevsNFT = ICryptoDevsNFT(_cryptoDevsNFT);\n\t\tnftMarketplace = IFakeNFTMarketplace(_nftMarketplace);\n\t}\n\n\tmodifier nftHolderOnly() {\n\t\trequire(cryptoDevsNFT.balanceOf(msg.sender) > 0, \"Not a Dao Member\");\n\t\t_;\n\t}\n\n\t/// @dev createProposal() allow holders of CryptoDevs to create a new proposal in the DAO\n\t/// @param _nftTokenId - the tokenId of NFT to be purchased from nftMarketplace if proposal passed;\n\t/// @return Returns the proposal index for the newly created proposal;\n\tfunction createProposal(\n\t\tuint _nftTokenId\n\t) external nftHolderOnly returns (uint) {\n\t\trequire(\n\t\t\tnftMarketplace.available(_nftTokenId),\n\t\t\t\"NFT Token Not Available\"\n\t\t);\n\n\t\tProposal storage proposal = proposals[size];\n\t\tproposal.nftTokenId = _nftTokenId;\n\t\t// set the proposal voting deadline to be (currentTime + 5 minutes;)\n\t\tproposal.deadline = block.timestamp + 5 minutes;\n\n\t\tsize++;\n\t\treturn size - 1;\n\t}\n\n\t// a modifier which only allow a function to be called\n\t// if the deadline of the given proposal with the proposalId has not beed exceeded yet;\n\tmodifier activeProposalOnly(uint proposalId) {\n\t\trequire(\n\t\t\tproposals[proposalId].deadline > block.timestamp,\n\t\t\t\"Proposal deadline exceeded\"\n\t\t);\n\t\t_;\n\t}\n\n\tenum Vote {\n\t\tApprove,\n\t\tReject\n\t}\n\n\tevent voteProposal(string msg, address _address, uint tokenId, bool voted);\n\tfunction voteOnProposal(\n\t\tuint proposalId,\n\t\tVote vote\n\t) external nftHolderOnly activeProposalOnly(proposalId) {\n\t\tProposal storage proposal = proposals[proposalId];\n\n\t\tuint voterNFTBalance = cryptoDevsNFT.balanceOf(msg.sender);\n\t\tuint numVotes = 0;\n\n\t\tfor (uint i = 0; i < voterNFTBalance; i++) {\n\t\t\tuint tokenId = cryptoDevsNFT.tokenOfOwnerByIndex(msg.sender, i);\n\t\t\temit voteProposal(\n\t\t\t\t\"vote proposal\",\n\t\t\t\tmsg.sender,\n\t\t\t\ttokenId,\n\t\t\t\tproposal.voters[tokenId]\n\t\t\t);\n\t\t\tif (proposal.voters[tokenId] == false) {\n\t\t\t\tnumVotes++;\n\t\t\t\tproposal.voters[tokenId] = true;\n\t\t\t}\n\t\t}\n\t\trequire(numVotes > 0, \"ALREADY_VOTED\");\n\n\t\tif (vote == Vote.Approve) {\n\t\t\tproposal.approvals += numVotes;\n\t\t} else {\n\t\t\tproposal.rejections += numVotes;\n\t\t}\n\t}\n\n\t// a modifier which only allow a function to be called\n\t// if the deadline of the proposal with the given proposalId has been exceeded and not bee excuted yet;\n\tmodifier inActiveProposalOnly(uint proposalId) {\n\t\trequire(\n\t\t\tproposals[proposalId].deadline <= block.timestamp,\n\t\t\t\"Proposal deadline not exceeded\"\n\t\t);\n\t\trequire(\n\t\t\tproposals[proposalId].excuted == false,\n\t\t\t\"Proposal has beed excuted\"\n\t\t);\n\t\t_;\n\t}\n\n\tfunction excuteProposal(\n\t\tuint proposalId\n\t) external nftHolderOnly inActiveProposalOnly(proposalId) {\n\t\tProposal storage proposal = proposals[proposalId];\n\n\t\tif (proposal.approvals > proposal.rejections) {\n\t\t\tuint price = nftMarketplace.getPrice();\n\t\t\trequire(address(this).balance >= price, \"Not enough founds\");\n\t\t\tnftMarketplace.purchase{ value: price }(proposal.nftTokenId);\n\t\t}\n\t\tproposal.excuted = true;\n\t}\n\n\tfunction withdrawEther() external onlyOwner {\n\t\tuint amount = address(this).balance;\n\t\taddress owner = owner();\n\t\trequire(amount > 0, \"Nothing to withdraw, contract balance empty\");\n\t\t(bool sent, ) = payable(owner).call{ value: amount }(\"\");\n\t\trequire((sent), \"FAILED_TO_WITHDRAW_ETHER\");\n\t}\n\n\tevent Log(string msg, uint amount, address sender);\n\treceive() external payable {\n\t\temit Log(\"receive called\", msg.value, msg.sender);\n\t}\n\tfallback() external payable {\n\t\temit Log(\"fallback called\", msg.value, msg.sender);\n\t}\n}\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}