{
  "address": "0x93a90E0BF037F616df8bbB5daD7941E056C59703",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_coordinatorAddress",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "_keyHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        }
      ],
      "name": "GameStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "gameId",
              "type": "uint256"
            },
            {
              "internalType": "enum RandomWinnerGame.GameStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "maxPlayers",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "entryFeeNumerator",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "entryFeeDenominator",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "players",
              "type": "address[]"
            },
            {
              "internalType": "address",
              "name": "winner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct RandomWinnerGame.Game",
          "name": "game",
          "type": "tuple"
        }
      ],
      "name": "GameStatusChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxPlayers",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "entryFee",
          "type": "uint256"
        }
      ],
      "name": "NewGame",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "PlayerJoined",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "finishGameEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "pickWinnerCall",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "randomwords",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        }
      ],
      "name": "receiveRandomWord",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "games",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "internalType": "enum RandomWinnerGame.GameStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "maxPlayers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "entryFeeNumerator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "entryFeeDenominator",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "winner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gasLimit",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "holdingGame",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        }
      ],
      "name": "joinGame",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keyHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxPlayers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_entryFeeNumerator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_entryFeeDenominator",
          "type": "uint256"
        }
      ],
      "name": "newGame",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pickWinner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_gasLimit",
          "type": "uint32"
        }
      ],
      "name": "setGasLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startGame",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "subscriptionId",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalGames",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x38d6d3c03d17ee30a404c227d8fa4071cab3bc06db253ceab0e79922393bb80c",
  "receipt": {
    "to": null,
    "from": "0x6483796f8D41f470daBf05319A1c7Ca3F3640163",
    "contractAddress": "0x93a90E0BF037F616df8bbB5daD7941E056C59703",
    "transactionIndex": 27,
    "gasUsed": "2135119",
    "logsBloom": "0x
    "blockHash": "0xdf4e5820e14e92a5b2cb2283fdcbc2fe966c9d047f3af9301be243ffa24ba4d7",
    "transactionHash": "0x38d6d3c03d17ee30a404c227d8fa4071cab3bc06db253ceab0e79922393bb80c",
    "logs": [
      {
        "transactionIndex": 27,
        "blockNumber": 5605747,
        "transactionHash": "0x38d6d3c03d17ee30a404c227d8fa4071cab3bc06db253ceab0e79922393bb80c",
        "address": "0x93a90E0BF037F616df8bbB5daD7941E056C59703",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006483796f8d41f470dabf05319a1c7ca3f3640163"
        ],
        "data": "0x",
        "logIndex": 89,
        "blockHash": "0xdf4e5820e14e92a5b2cb2283fdcbc2fe966c9d047f3af9301be243ffa24ba4d7"
      }
    ],
    "blockNumber": 5605747,
    "cumulativeGasUsed": "5314978",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8103b0a8a00be2ddc778e6e7eaa21791cd364625",
    "10595",
    "0x474e34a077df58807dbe9c96d3c009b23b3c6d0cce433e59bbf5b34f823bc56c"
  ],
  "numDeployments": 3,
  "solcInputHash": "861f7861003c2eb79464fd38d63f55f0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_coordinatorAddress\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"GameStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"enum RandomWinnerGame.GameStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"maxPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"entryFeeNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"entryFeeDenominator\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"players\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct RandomWinnerGame.Game\",\"name\":\"game\",\"type\":\"tuple\"}],\"name\":\"GameStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxPlayers\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"entryFee\",\"type\":\"uint256\"}],\"name\":\"NewGame\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"PlayerJoined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"finishGameEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"pickWinnerCall\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"randomwords\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"receiveRandomWord\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"games\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"enum RandomWinnerGame.GameStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"maxPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"entryFeeNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"entryFeeDenominator\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasLimit\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"holdingGame\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"joinGame\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keyHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_entryFeeNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_entryFeeDenominator\",\"type\":\"uint256\"}],\"name\":\"newGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pickWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_gasLimit\",\"type\":\"uint32\"}],\"name\":\"setGasLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subscriptionId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalGames\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RandomWinnerGame.sol\":\"RandomWinnerGame\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  // solhint-disable-next-line chainlink-solidity/prefix-immutable-variables-with-i\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  // solhint-disable-next-line chainlink-solidity/prefix-internal-functions-with-underscore\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x5a502a5ce16796565815b295bb2d18a0d26d6f23621f733918c971047c6091d7\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig() external view returns (uint16, uint32, bytes32[] memory);\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(\\n    uint64 subId\\n  ) external view returns (uint96 balance, uint64 reqCount, address owner, address[] memory consumers);\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa9f8b7e09811f4ac9f421116b5d6bcf50b5748025c0cb012aaf5ff7c39a6b46a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/RandomWinnerGame.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity ^0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol\\\";\\ncontract RandomWinnerGame is VRFConsumerBaseV2,Ownable {\\n\\n  enum GameStatus{\\n    // not started\\n    PENDING,\\n    // game has started\\n    STARTED,\\n    // game ended\\n    ENDED\\n  }\\n\\n  struct Game {\\n    // ID for the game\\n    uint gameId;\\n    // enum status represent the status of the game \\n    GameStatus status;\\n    // maximum players of the game\\n    uint maxPlayers;\\n    // fees for joined the game\\n    uint entryFeeNumerator;\\n\\n    uint entryFeeDenominator;\\n    // address of players\\n    address[] players;\\n\\n    address winner;\\n\\n    // who starts this game;\\n    address owner;\\n  }\\n  // mapping of id to Game\\n  mapping (uint => Game) public games;\\n\\n  // mapping of address to boolean, indicate this address currently hold a non-ended game ( as the owner);\\n  mapping (address => uint) public holdingGame;\\n\\n  // mapping of requestId to owner address\\n  mapping(uint => address ) requestIds;\\n\\n  uint public totalGames = 0;\\n\\n  uint32 public gasLimit = 100000;\\n\\n\\n  \\n  VRFCoordinatorV2Interface Coordinator;\\n\\n  uint64 public subscriptionId;\\n  bytes32 public keyHash;\\n  constructor(address _coordinatorAddress,uint64 _subscriptionId,bytes32 _keyHash) VRFConsumerBaseV2(_coordinatorAddress) Ownable(msg.sender){\\n    Coordinator = VRFCoordinatorV2Interface(_coordinatorAddress);\\n    subscriptionId = _subscriptionId;\\n    keyHash = _keyHash;\\n  }\\n\\n  function setGasLimit(uint32 _gasLimit)public onlyOwner{\\n    gasLimit = _gasLimit;\\n  }\\n\\n  modifier onlyJoinableGame(uint gameId){\\n    Game storage game = games[gameId];\\n    require(game.status == GameStatus.STARTED,'Game has not been started yet');\\n    require(game.players.length < game.maxPlayers,'Game is full');\\n    require(msg.value == game.entryFeeNumerator * 10 ** 18 / game.entryFeeDenominator, 'Insufficient ether to join the game');\\n    _;\\n  }\\n\\n  event PlayerJoined(uint gameId,address _address,uint value);\\n  function joinGame(uint gameId)public payable onlyJoinableGame(gameId){\\n    Game storage game = games[gameId];\\n    game.players.push(address(msg.sender));\\n    emit GameStatusChanged(game);\\n    emit PlayerJoined(gameId, msg.sender,msg.value);\\n  }\\n\\n  event GameStatusChanged(Game game);\\n\\n\\n  event NewGame(uint gameId,address owner, uint maxPlayers, uint entryFee);\\n  function newGame(uint _maxPlayers,uint _entryFeeNumerator,uint _entryFeeDenominator)public{\\n    require(_maxPlayers > 0, 'UnExpected arguments [_maxPlayers]: 0');\\n    require(holdingGame[msg.sender] == 0,'Currently holding a game, wait util the game end');\\n    totalGames++;\\n    uint gameId = totalGames;\\n    Game storage game = games[gameId];\\n    game.entryFeeNumerator = _entryFeeNumerator;\\n    game.entryFeeDenominator = _entryFeeDenominator;\\n    game.gameId = gameId;\\n    game.maxPlayers = _maxPlayers;\\n    game.owner = msg.sender;\\n    game.status = GameStatus.PENDING;\\n\\n    holdingGame[msg.sender] = gameId;\\n    emit GameStatusChanged(game);\\n    emit NewGame(gameId,msg.sender,_maxPlayers,game.entryFeeNumerator * 10 ** 18 / game.entryFeeDenominator);\\n  }\\n\\n  modifier onlyGameHolder {\\n    require(holdingGame[(msg.sender)] != 0,'Please hold a new game');\\n    _;\\n  }\\n  event GameStarted(uint gameId);\\n  function startGame()public onlyGameHolder{\\n    uint gameId = holdingGame[msg.sender];\\n    Game storage game = games[gameId];\\n    game.status = GameStatus.STARTED;\\n    emit GameStatusChanged(game);\\n    emit GameStarted(gameId);\\n  }\\n\\n  event pickWinnerCall(uint requestId);\\n  function pickWinner()public onlyGameHolder {\\n    uint requestId = requestRandomness();\\n    emit pickWinnerCall(requestId);\\n    requestIds[requestId] = msg.sender;\\n  }\\n\\n\\n  function requestRandomness()internal returns (uint requestId){\\n        // Will revert if subscription is not set and funded.\\n        requestId = Coordinator.requestRandomWords(\\n            keyHash,\\n            subscriptionId,\\n            3,\\n            gasLimit,\\n            1\\n        );\\n        return requestId;\\n  }\\n\\nevent receiveRandomWord(uint requestId,uint[] randomwords,uint gameId);\\n function fulfillRandomWords(\\n        uint256 _requestId,\\n        uint256[] memory _randomWords\\n  ) internal override {\\n      require(requestIds[_requestId] != address(0),'Request not found');\\n      uint gameId = holdingGame[requestIds[_requestId]];\\n      emit receiveRandomWord(_requestId,_randomWords,gameId);\\n      finishGame(gameId,_randomWords[0]);\\n    }\\n\\n    event finishGameEvent(uint gameId, address winner);\\n    function finishGame(uint gameId, uint randomWord)internal {\\n      Game storage game = games[gameId];\\n      game.status = GameStatus.ENDED;\\n      holdingGame[game.owner] = 0;\\n      address winner = game.players[(randomWord % (game.maxPlayers))];\\n      game.winner = winner;\\n      \\n      uint fee = game.entryFeeNumerator * 10 ** 18 / game.entryFeeDenominator;\\n      (bool sent,) = payable(winner).call{value: game.maxPlayers *fee}(\\\"\\\");\\n      emit GameStatusChanged(game);\\n      emit finishGameEvent(gameId,winner);\\n      require(sent,'Finish Game failed: cannot sent ether to winner');\\n    }\\n}\",\"keccak256\":\"0x24b03cfdd748f05ae8952e1811987f887fd1330b7f0857508a91095d20a4f4f4\",\"license\":\"SEE LICENSE IN LICENSE\"}},\"version\":1}",
  "bytecode": "0x60a06040526000600455620186a0600560006101000a81548163ffffffff021916908363ffffffff1602179055503480156200003a57600080fd5b506040516200282f3803806200282f833981810160405281019062000060919062000346565b33838073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036200010c5760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401620001039190620003b3565b60405180910390fd5b6200011d816200019860201b60201c565b5082600560046101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600560186101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555080600681905550505050620003d0565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200028e8262000261565b9050919050565b620002a08162000281565b8114620002ac57600080fd5b50565b600081519050620002c08162000295565b92915050565b600067ffffffffffffffff82169050919050565b620002e581620002c6565b8114620002f157600080fd5b50565b6000815190506200030581620002da565b92915050565b6000819050919050565b62000320816200030b565b81146200032c57600080fd5b50565b600081519050620003408162000315565b92915050565b6000806000606084860312156200036257620003616200025c565b5b60006200037286828701620002af565b93505060206200038586828701620002f4565b925050604062000398868287016200032f565b9150509250925092565b620003ad8162000281565b82525050565b6000602082019050620003ca6000830184620003a2565b92915050565b60805161243c620003f3600039600081816103f40152610448015261243c6000f3fe6080604052600436106100e85760003560e01c80635d495aea1161008a578063d65ab5f211610059578063d65ab5f2146102c2578063efaa55a0146102d9578063f2fde38b146102f5578063f68016b71461031e576100e8565b80635d495aea1461023e57806361728f3914610255578063715018a6146102805780638da5cb5b14610297576100e8565b80632c4e591b116100c65780632c4e591b1461018457806330852db8146101af57806352d84c62146101d857806357c5a6cc14610201576100e8565b806309c1ba2e146100ed578063117a5b90146101185780631fe543e31461015b575b600080fd5b3480156100f957600080fd5b50610102610349565b60405161010f919061138d565b60405180910390f35b34801561012457600080fd5b5061013f600480360381019061013a91906113f2565b610363565b60405161015297969594939291906114e6565b60405180910390f35b34801561016757600080fd5b50610182600480360381019061017d91906116ae565b6103f2565b005b34801561019057600080fd5b506101996104b2565b6040516101a6919061170a565b60405180910390f35b3480156101bb57600080fd5b506101d660048036038101906101d19190611725565b6104b8565b005b3480156101e457600080fd5b506101ff60048036038101906101fa91906117b4565b61072c565b005b34801561020d57600080fd5b506102286004803603810190610223919061180d565b610758565b604051610235919061170a565b60405180910390f35b34801561024a57600080fd5b50610253610770565b005b34801561026157600080fd5b5061026a61088a565b6040516102779190611853565b60405180910390f35b34801561028c57600080fd5b50610295610890565b005b3480156102a357600080fd5b506102ac6108a4565b6040516102b9919061186e565b60405180910390f35b3480156102ce57600080fd5b506102d76108cd565b005b6102f360048036038101906102ee91906113f2565b610a49565b005b34801561030157600080fd5b5061031c6004803603810190610317919061180d565b610c82565b005b34801561032a57600080fd5b50610333610d08565b6040516103409190611898565b60405180910390f35b600560189054906101000a900467ffffffffffffffff1681565b60016020528060005260406000206000915090508060000154908060010160009054906101000a900460ff16908060020154908060030154908060040154908060060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905087565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104a457337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161049b9291906118b3565b60405180910390fd5b6104ae8282610d1e565b5050565b60045481565b600083116104fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f29061195f565b60405180910390fd5b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541461057d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610574906119f1565b60405180910390fd5b6004600081548092919061059090611a40565b9190505550600060045490506000600160008381526020019081526020016000209050838160030181905550828160040181905550818160000181905550848160020181905550338160070160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008160010160006101000a81548160ff021916908360028111156106425761064161142e565b5b021790555081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507fc842bb72e77cfc6a67954f802d5715c4b59efcbc5d609f17495e3c124a76558d816040516106ba9190611d13565b60405180910390a17f4c2f7f67b6c0dd532193a9bc2e478a5ca8e7cad8dc7b9a1eae81ad4b76dd35718233878460040154670de0b6b3a764000086600301546107039190611d35565b61070d9190611da6565b60405161071d9493929190611dd7565b60405180910390a15050505050565b610734610e9c565b80600560006101000a81548163ffffffff021916908363ffffffff16021790555050565b60026020528060005260406000206000915090505481565b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054036107f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107e990611e68565b60405180910390fd5b60006107fc610f23565b90507f6c5c69a9e2b098dc9841306b4573c7224354e73a998a15e21805b39bb649617e8160405161082d919061170a565b60405180910390a1336003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60065481565b610898610e9c565b6108a26000610ffc565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540361094f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161094690611e68565b60405180910390fd5b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600060016000838152602001908152602001600020905060018160010160006101000a81548160ff021916908360028111156109d2576109d161142e565b5b02179055507fc842bb72e77cfc6a67954f802d5715c4b59efcbc5d609f17495e3c124a76558d81604051610a069190611d13565b60405180910390a17f50ad08f58a27f2851d7e3a1b3a6a46b290f2ce677e99642d30ff639721e7779082604051610a3d919061170a565b60405180910390a15050565b80600060016000838152602001908152602001600020905060016002811115610a7557610a7461142e565b5b8160010160009054906101000a900460ff166002811115610a9957610a9861142e565b5b14610ad9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad090611ed4565b60405180910390fd5b8060020154816005018054905010610b26576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1d90611f40565b60405180910390fd5b8060040154670de0b6b3a76400008260030154610b439190611d35565b610b4d9190611da6565b3414610b8e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b8590611fd2565b60405180910390fd5b600060016000858152602001908152602001600020905080600501339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fc842bb72e77cfc6a67954f802d5715c4b59efcbc5d609f17495e3c124a76558d81604051610c399190611d13565b60405180910390a17f03dfbe1fcb4e2d61f3b4a0c93d8f814c92250618b3387f396cc9fc9fafe2c203843334604051610c7493929190611ff2565b60405180910390a150505050565b610c8a610e9c565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610cfc5760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401610cf3919061186e565b60405180910390fd5b610d0581610ffc565b50565b600560009054906101000a900463ffffffff1681565b600073ffffffffffffffffffffffffffffffffffffffff166003600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610dc0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610db790612075565b60405180910390fd5b6000600260006003600086815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490507fa4766db0c6aa5f4459d4eec39096c95c259be5d3b38c73c175ffad87b172f742838383604051610e6a93929190612144565b60405180910390a1610e978183600081518110610e8a57610e89612182565b5b60200260200101516110c0565b505050565b610ea4611362565b73ffffffffffffffffffffffffffffffffffffffff16610ec26108a4565b73ffffffffffffffffffffffffffffffffffffffff1614610f2157610ee5611362565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401610f18919061186e565b60405180910390fd5b565b6000600560049054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635d3b1d30600654600560189054906101000a900467ffffffffffffffff166003600560009054906101000a900463ffffffff1660016040518663ffffffff1660e01b8152600401610fb495949392919061223f565b6020604051808303816000875af1158015610fd3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ff791906122a7565b905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600060016000848152602001908152602001600020905060028160010160006101000a81548160ff021916908360028111156110ff576110fe61142e565b5b02179055506000600260008360070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060008160050182600201548461118391906122d4565b8154811061119457611193612182565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050808260060160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008260040154670de0b6b3a764000084600301546112239190611d35565b61122d9190611da6565b905060008273ffffffffffffffffffffffffffffffffffffffff168285600201546112589190611d35565b60405161126490612336565b60006040518083038185875af1925050503d80600081146112a1576040519150601f19603f3d011682016040523d82523d6000602084013e6112a6565b606091505b505090507fc842bb72e77cfc6a67954f802d5715c4b59efcbc5d609f17495e3c124a76558d846040516112d99190611d13565b60405180910390a17f219d5e79d7957c86c2a7527d9e79783bbe8e3eb22bd55473a6c334eca4da426c868460405161131292919061234b565b60405180910390a18061135a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611351906123e6565b60405180910390fd5b505050505050565b600033905090565b600067ffffffffffffffff82169050919050565b6113878161136a565b82525050565b60006020820190506113a2600083018461137e565b92915050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6113cf816113bc565b81146113da57600080fd5b50565b6000813590506113ec816113c6565b92915050565b600060208284031215611408576114076113b2565b5b6000611416848285016113dd565b91505092915050565b611428816113bc565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6003811061146e5761146d61142e565b5b50565b600081905061147f8261145d565b919050565b600061148f82611471565b9050919050565b61149f81611484565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006114d0826114a5565b9050919050565b6114e0816114c5565b82525050565b600060e0820190506114fb600083018a61141f565b6115086020830189611496565b611515604083018861141f565b611522606083018761141f565b61152f608083018661141f565b61153c60a08301856114d7565b61154960c08301846114d7565b98975050505050505050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6115a38261155a565b810181811067ffffffffffffffff821117156115c2576115c161156b565b5b80604052505050565b60006115d56113a8565b90506115e1828261159a565b919050565b600067ffffffffffffffff8211156116015761160061156b565b5b602082029050602081019050919050565b600080fd5b600061162a611625846115e6565b6115cb565b9050808382526020820190506020840283018581111561164d5761164c611612565b5b835b81811015611676578061166288826113dd565b84526020840193505060208101905061164f565b5050509392505050565b600082601f83011261169557611694611555565b5b81356116a5848260208601611617565b91505092915050565b600080604083850312156116c5576116c46113b2565b5b60006116d3858286016113dd565b925050602083013567ffffffffffffffff8111156116f4576116f36113b7565b5b61170085828601611680565b9150509250929050565b600060208201905061171f600083018461141f565b92915050565b60008060006060848603121561173e5761173d6113b2565b5b600061174c868287016113dd565b935050602061175d868287016113dd565b925050604061176e868287016113dd565b9150509250925092565b600063ffffffff82169050919050565b61179181611778565b811461179c57600080fd5b50565b6000813590506117ae81611788565b92915050565b6000602082840312156117ca576117c96113b2565b5b60006117d88482850161179f565b91505092915050565b6117ea816114c5565b81146117f557600080fd5b50565b600081359050611807816117e1565b92915050565b600060208284031215611823576118226113b2565b5b6000611831848285016117f8565b91505092915050565b6000819050919050565b61184d8161183a565b82525050565b60006020820190506118686000830184611844565b92915050565b600060208201905061188360008301846114d7565b92915050565b61189281611778565b82525050565b60006020820190506118ad6000830184611889565b92915050565b60006040820190506118c860008301856114d7565b6118d560208301846114d7565b9392505050565b600082825260208201905092915050565b7f556e457870656374656420617267756d656e7473205b5f6d6178506c6179657260008201527f735d3a2030000000000000000000000000000000000000000000000000000000602082015250565b60006119496025836118dc565b9150611954826118ed565b604082019050919050565b600060208201905081810360008301526119788161193c565b9050919050565b7f43757272656e746c7920686f6c64696e6720612067616d652c2077616974207560008201527f74696c207468652067616d6520656e6400000000000000000000000000000000602082015250565b60006119db6030836118dc565b91506119e68261197f565b604082019050919050565b60006020820190508181036000830152611a0a816119ce565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611a4b826113bc565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611a7d57611a7c611a11565b5b600182019050919050565b60008160001c9050919050565b6000819050919050565b6000611ab2611aad83611a88565b611a95565b9050919050565b611ac2816113bc565b82525050565b600060ff82169050919050565b6000611ae8611ae383611a88565b611ac8565b9050919050565b611af881611484565b82525050565b600081549050919050565b600082825260208201905092915050565b60008190508160005260206000209050919050565b611b38816114c5565b82525050565b6000611b4a8383611b2f565b60208301905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611b89611b8483611a88565b611b56565b9050919050565b6000611b9c8254611b76565b9050919050565b6000600182019050919050565b6000611bbb82611afe565b611bc58185611b09565b9350611bd083611b1a565b8060005b83811015611c0857611be582611b90565b611bef8882611b3e565b9750611bfa83611ba3565b925050600181019050611bd4565b5085935050505092915050565b600061010083016000808401549050611c2d81611a9f565b611c3a6000870182611ab9565b5060018401549050611c4b81611ad5565b611c586020870182611aef565b5060028401549050611c6981611a9f565b611c766040870182611ab9565b5060038401549050611c8781611a9f565b611c946060870182611ab9565b5060048401549050611ca581611a9f565b611cb26080870182611ab9565b506005840185830360a0870152611cc98382611bb0565b92505060068401549050611cdc81611b76565b611ce960c0870182611b2f565b5060078401549050611cfa81611b76565b611d0760e0870182611b2f565b50819250505092915050565b60006020820190508181036000830152611d2d8184611c15565b905092915050565b6000611d40826113bc565b9150611d4b836113bc565b9250828202611d59816113bc565b91508282048414831517611d7057611d6f611a11565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611db1826113bc565b9150611dbc836113bc565b925082611dcc57611dcb611d77565b5b828204905092915050565b6000608082019050611dec600083018761141f565b611df960208301866114d7565b611e06604083018561141f565b611e13606083018461141f565b95945050505050565b7f506c6561736520686f6c642061206e65772067616d6500000000000000000000600082015250565b6000611e526016836118dc565b9150611e5d82611e1c565b602082019050919050565b60006020820190508181036000830152611e8181611e45565b9050919050565b7f47616d6520686173206e6f74206265656e207374617274656420796574000000600082015250565b6000611ebe601d836118dc565b9150611ec982611e88565b602082019050919050565b60006020820190508181036000830152611eed81611eb1565b9050919050565b7f47616d652069732066756c6c0000000000000000000000000000000000000000600082015250565b6000611f2a600c836118dc565b9150611f3582611ef4565b602082019050919050565b60006020820190508181036000830152611f5981611f1d565b9050919050565b7f496e73756666696369656e7420657468657220746f206a6f696e20746865206760008201527f616d650000000000000000000000000000000000000000000000000000000000602082015250565b6000611fbc6023836118dc565b9150611fc782611f60565b604082019050919050565b60006020820190508181036000830152611feb81611faf565b9050919050565b6000606082019050612007600083018661141f565b61201460208301856114d7565b612021604083018461141f565b949350505050565b7f52657175657374206e6f7420666f756e64000000000000000000000000000000600082015250565b600061205f6011836118dc565b915061206a82612029565b602082019050919050565b6000602082019050818103600083015261208e81612052565b9050919050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006120cd8383611ab9565b60208301905092915050565b6000602082019050919050565b60006120f182612095565b6120fb81856120a0565b9350612106836120b1565b8060005b8381101561213757815161211e88826120c1565b9750612129836120d9565b92505060018101905061210a565b5085935050505092915050565b6000606082019050612159600083018661141f565b818103602083015261216b81856120e6565b905061217a604083018461141f565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000819050919050565b600061ffff82169050919050565b6000819050919050565b60006121ee6121e96121e4846121b1565b6121c9565b6121bb565b9050919050565b6121fe816121d3565b82525050565b6000819050919050565b600061222961222461221f84612204565b6121c9565b611778565b9050919050565b6122398161220e565b82525050565b600060a0820190506122546000830188611844565b612261602083018761137e565b61226e60408301866121f5565b61227b6060830185611889565b6122886080830184612230565b9695505050505050565b6000815190506122a1816113c6565b92915050565b6000602082840312156122bd576122bc6113b2565b5b60006122cb84828501612292565b91505092915050565b60006122df826113bc565b91506122ea836113bc565b9250826122fa576122f9611d77565b5b828206905092915050565b600081905092915050565b50565b6000612320600083612305565b915061232b82612310565b600082019050919050565b600061234182612313565b9150819050919050565b6000604082019050612360600083018561141f565b61236d60208301846114d7565b9392505050565b7f46696e6973682047616d65206661696c65643a2063616e6e6f742073656e742060008201527f657468657220746f2077696e6e65720000000000000000000000000000000000602082015250565b60006123d0602f836118dc565b91506123db82612374565b604082019050919050565b600060208201905081810360008301526123ff816123c3565b905091905056fea264697066735822122073d4664e56a64cae05ea95e629f0f50b4006f293d8f5de9f70a0c1ebd8dfe1cc64736f6c63430008180033",
  "deployedBytecode": "",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 162,
        "contract": "contracts/RandomWinnerGame.sol:RandomWinnerGame",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 368,
        "contract": "contracts/RandomWinnerGame.sol:RandomWinnerGame",
        "label": "games",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(Game)363_storage)"
      },
      {
        "astId": 372,
        "contract": "contracts/RandomWinnerGame.sol:RandomWinnerGame",
        "label": "holdingGame",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 376,
        "contract": "contracts/RandomWinnerGame.sol:RandomWinnerGame",
        "label": "requestIds",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 379,
        "contract": "contracts/RandomWinnerGame.sol:RandomWinnerGame",
        "label": "totalGames",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 382,
        "contract": "contracts/RandomWinnerGame.sol:RandomWinnerGame",
        "label": "gasLimit",
        "offset": 0,
        "slot": "5",
        "type": "t_uint32"
      },
      {
        "astId": 385,
        "contract": "contracts/RandomWinnerGame.sol:RandomWinnerGame",
        "label": "Coordinator",
        "offset": 4,
        "slot": "5",
        "type": "t_contract(VRFCoordinatorV2Interface)153"
      },
      {
        "astId": 387,
        "contract": "contracts/RandomWinnerGame.sol:RandomWinnerGame",
        "label": "subscriptionId",
        "offset": 24,
        "slot": "5",
        "type": "t_uint64"
      },
      {
        "astId": 389,
        "contract": "contracts/RandomWinnerGame.sol:RandomWinnerGame",
        "label": "keyHash",
        "offset": 0,
        "slot": "6",
        "type": "t_bytes32"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(VRFCoordinatorV2Interface)153": {
        "encoding": "inplace",
        "label": "contract VRFCoordinatorV2Interface",
        "numberOfBytes": "20"
      },
      "t_enum(GameStatus)344": {
        "encoding": "inplace",
        "label": "enum RandomWinnerGame.GameStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(Game)363_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct RandomWinnerGame.Game)",
        "numberOfBytes": "32",
        "value": "t_struct(Game)363_storage"
      },
      "t_struct(Game)363_storage": {
        "encoding": "inplace",
        "label": "struct RandomWinnerGame.Game",
        "members": [
          {
            "astId": 346,
            "contract": "contracts/RandomWinnerGame.sol:RandomWinnerGame",
            "label": "gameId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 349,
            "contract": "contracts/RandomWinnerGame.sol:RandomWinnerGame",
            "label": "status",
            "offset": 0,
            "slot": "1",
            "type": "t_enum(GameStatus)344"
          },
          {
            "astId": 351,
            "contract": "contracts/RandomWinnerGame.sol:RandomWinnerGame",
            "label": "maxPlayers",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 353,
            "contract": "contracts/RandomWinnerGame.sol:RandomWinnerGame",
            "label": "entryFeeNumerator",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 355,
            "contract": "contracts/RandomWinnerGame.sol:RandomWinnerGame",
            "label": "entryFeeDenominator",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 358,
            "contract": "contracts/RandomWinnerGame.sol:RandomWinnerGame",
            "label": "players",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 360,
            "contract": "contracts/RandomWinnerGame.sol:RandomWinnerGame",
            "label": "winner",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 362,
            "contract": "contracts/RandomWinnerGame.sol:RandomWinnerGame",
            "label": "owner",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}